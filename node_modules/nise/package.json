{
  "_args": [
    [
      {
        "raw": "nise@^1.0.1",
        "scope": null,
        "escapedName": "nise",
        "name": "nise",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/Namkai/Projects/flow-engine/node_modules/sinon"
    ]
  ],
  "_from": "nise@>=1.0.1 <2.0.0",
  "_id": "nise@1.0.1",
  "_inCache": true,
  "_location": "/nise",
  "_nodeVersion": "6.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nise-1.0.1.tgz_1499716311493_0.6389482740778476"
  },
  "_npmUser": {
    "name": "mrgnrdrck",
    "email": "morgan@roderick.dk"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nise@^1.0.1",
    "scope": null,
    "escapedName": "nise",
    "name": "nise",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sinon"
  ],
  "_resolved": "https://registry.npmjs.org/nise/-/nise-1.0.1.tgz",
  "_shasum": "0da92b10a854e97c0f496f6c2845a301280b3eef",
  "_shrinkwrap": null,
  "_spec": "nise@^1.0.1",
  "_where": "/Users/Namkai/Projects/flow-engine/node_modules/sinon",
  "author": "",
  "bugs": {
    "url": "https://github.com/sinonjs/nise/issues"
  },
  "dependencies": {
    "formatio": "^1.2.0",
    "just-extend": "^1.1.22",
    "lolex": "^1.6.0",
    "path-to-regexp": "^1.7.0"
  },
  "description": "Fake XHR and server",
  "devDependencies": {
    "browserify": "^14.4.0",
    "eslint": "^3.19.0",
    "eslint-config-sinon": "^1.0.1",
    "eslint-plugin-mocha": "^4.9.0",
    "jsdom": "11.0.0",
    "jsdom-global": "3.0.2",
    "mocha": "^3.4.2",
    "nyc": "^11.0.2",
    "pre-commit": "^1.2.2",
    "proxyquire": "^1.8.0",
    "referee": "^1.2.0",
    "sinon": "^2.3.4",
    "xmldom": "^0.1.27"
  },
  "directories": {},
  "dist": {
    "shasum": "0da92b10a854e97c0f496f6c2845a301280b3eef",
    "tarball": "https://registry.npmjs.org/nise/-/nise-1.0.1.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-sinon",
    "globals": {
      "ArrayBuffer": false
    },
    "env": {
      "mocha": true
    },
    "plugins": [
      "mocha"
    ],
    "rules": {
      "mocha/no-exclusive-tests": "error",
      "mocha/no-identical-title": "error",
      "mocha/no-nested-tests": "error",
      "mocha/no-sibling-hooks": "error",
      "mocha/no-top-level-hooks": "error",
      "max-nested-callbacks": "off"
    }
  },
  "gitHead": "ea3ef8bf56a85132bc2565184b1a30847b1bbff5",
  "homepage": "https://github.com/sinonjs/nise#readme",
  "keywords": [
    "test",
    "testing",
    "fake",
    "mock",
    "xhr",
    "server"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "mrgnrdrck",
      "email": "morgan@roderick.dk"
    }
  ],
  "name": "nise",
  "nyc": {
    "exclude": [
      "nise.js",
      "coverage/**",
      "**/*.test.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# nise (偽) [![npm version](https://img.shields.io/npm/v/nise.svg?style=flat)](https://www.npmjs.com/package/nise) [![Build Status](https://travis-ci.org/sinonjs/nise.svg?branch=master)](https://travis-ci.org/sinonjs/nise)\n\nfake XHR and Server\n\nThis module has been extracted from [Sinon.JS][sinon] and can be used standalone.\n\n## Fake `XMLHttpRequest`\n\nProvides a fake implementation of `XMLHttpRequest` and provides\nseveral interfaces for manipulating objects created by it.\n\nAlso fakes native `XMLHttpRequest` and `ActiveXObject` (when available, and only for `XMLHTTP` progids). Helps with testing requests made with `XHR`.\n\n```javascript\nvar fakeXhr = require(\"nise\").fakeXhr;\nvar sinon = require(\"sinon\");\n\n{\n    setUp: function () {\n        this.xhr = fakeXhr.useFakeXMLHttpRequest();\n        var requests = this.requests = [];\n\n        this.xhr.onCreate = function (xhr) {\n            requests.push(xhr);\n        };\n    },\n\n    tearDown: function () {\n        this.xhr.restore();\n    },\n\n    \"test should fetch comments from server\" : function () {\n        var callback = sinon.spy();\n        myLib.getCommentsFor(\"/some/article\", callback);\n        assertEquals(1, this.requests.length);\n\n        this.requests[0].respond(200, { \"Content-Type\": \"application/json\" },\n                                 '[{ \"id\": 12, \"comment\": \"Hey there\" }]');\n        assert(callback.calledWith([{ id: 12, comment: \"Hey there\" }]));\n    }\n}\n```\n\n\n### `useFakeXMLHttpRequest`\n\n#### var xhr = fakeXhr.useFakeXMLHttpRequest();\"\n\nCauses fakeXhr to replace the native `XMLHttpRequest` object in browsers that support it with a custom implementation which does not send actual requests.\n\nIn browsers that support `ActiveXObject`, this constructor is replaced, and fake objects are returned for `XMLHTTP` progIds. Other progIds, such as `XMLDOM` are left untouched.\n\nThe native `XMLHttpRequest` object will be available at `fakeXhr.xhr.XMLHttpRequest`\n\n\n#### `xhr.onCreate = function (xhr) {};`\n\nBy assigning a function to the `onCreate` property of the returned object from `useFakeXMLHttpRequest()` you can subscribe to newly created `FakeXMLHttpRequest` objects. See below for the fake xhr object API.\n\nUsing this observer means you can still reach objects created by e.g. `jQuery.ajax` (or other abstractions/frameworks).\n\n#### `xhr.restore();`\n\nRestore original function(s).\n\n\n### `FakeXMLHttpRequest`\n\n#### `String request.url`\n\nThe URL set on the request object.\n\n\n#### `String request.method`\n\nThe request method as a string.\n\n\n#### `Object request.requestHeaders`\n\nAn object of all request headers, i.e.:\n\n```javascript\n{\n    \"Accept\": \"text/html, */*\",\n    \"Connection\": \"keep-alive\"\n}\n```\n\n\n#### `String request.requestBody`\n\nThe request body\n\n#### `int request.status`\n\nThe request's status code.\n\n`undefined` if the request has not been handled (see [`respond`](#respond) below)\n\n\n#### `String request.statusText`\n\nOnly populated if the [`respond`](#respond) method is called (see below).\n\n\n#### `boolean request.async`\n\nWhether or not the request is asynchronous.\n\n\n#### `String request.username`\n\nUsername, if any.\n\n\n#### `String request.password`\n\nPassword, if any.\n\n\n#### `Document request.responseXML`\n\nWhen using [`respond`](#respond), this property is populated with a parsed document if response headers indicate as much (see [the spec](http://www.w3.org/TR/XMLHttpRequest/))\n\n\n#### `String request.getResponseHeader(header);`\n\nThe value of the given response header, if the request has been responded to (see [`respond`](#respond)).\n\n\n#### `Object request.getAllResponseHeaders();`\n\nAll response headers as an object.\n\n\n### Filtered requests\n\nWhen using Sinon.JS for mockups or partial integration/functional testing, you might want to fake some requests, while allowing others to go through to the backend server. With filtered `FakeXMLHttpRequest`s (new in v1.3.0), you can.\n\n\n#### `FakeXMLHttpRequest.useFilters`\n\nDefault `false`.\n\nWhen set to `true`, Sinon will check added filters if certain requests should be \"unfaked\"\n\n\n#### `FakeXMLHttpRequest.addFilter(fn)`\n\nAdd a filter that will decide whether or not to fake a request.\n\nThe filter will be called when `xhr.open` is called, with the exact same arguments (`method`, `url`, `async`, `username`, `password`). If the filter returns `true`, the request will not be faked.\n\n\n### Simulating server responses\n\n#### `request.setStatus(status);``\n\nSets response status (`status` and `statusText` properties).\n\nStatus should be a number, the status text is looked up from `fakeXhr.FakeXMLHttpRequest.statusCodes`.\n\n#### `request.setResponseHeaders(object);``\n\nSets response headers (e.g. `{ \"Content-Type\": \"text/html\", /* ... */ }`, updates the `readyState` property and fires `onreadystatechange`.\n\n\n#### `request.setResponseBody(body);`\n\nSets the respond body, updates the `readyState` property and fires `onreadystatechange`.\n\nAdditionally, populates `responseXML` with a parsed document if [response headers indicate as much](http://www.w3.org/TR/XMLHttpRequest/).\n\n\n#### `request.respond(status, headers, body);``\n\nCalls the above three methods.\n\n#### `request.error();`\n\nSimulates a network error on the request. The `onerror` handler will be called and the `status` will be `0`.\n\n#### `Boolean request.autoRespond`\n\nWhen set to `true`, causes the server to automatically respond to incoming requests after a timeout.\n\nThe default timeout is 10ms but you can control it through the `autoRespondAfter` property.\n\nNote that this feature is intended to help during mockup development, and is not suitable for use in tests.\n\n#### `Number request.autoRespondAfter`\n\nWhen `autoRespond` is `true`, respond to requests after this number of milliseconds. Default is 10.\n\n\n## Fake server\nHigh-level API to manipulate `FakeXMLHttpRequest` instances.\n\n<small>For help with handling JSON-P please refer to our [notes below](#json-p)</small>\n\n```javascript\nvar fakeServer = require(\"nise\").fakeServer;\nvar sinon = require(\"sinon\");\n\n{\n    setUp: function () {\n        this.server = fakeServer.create();\n    },\n\n    tearDown: function () {\n        this.server.restore();\n    },\n\n    \"test should fetch comments from server\" : function () {\n        this.server.respondWith(\"GET\", \"/some/article/comments.json\",\n            [200, { \"Content-Type\": \"application/json\" },\n             '[{ \"id\": 12, \"comment\": \"Hey there\" }]']);\n\n        var callback = sinon.spy();\n        myLib.getCommentsFor(\"/some/article\", callback);\n        this.server.respond();\n\n        sinon.assert.calledWith(callback, [{ id: 12, comment: \"Hey there\" }]);\n\n        assert(server.requests.length > 0)\n    }\n}\n```\n\n\n#### `var server = fakeServer.create([config]);``\n\nCreates a new server.\n\nThis function also calls `useFakeXMLHttpRequest()`.\n\n`create` accepts optional properties to configure the fake server. See [options](#options) below for configuration parameters.\n\n\n#### `var server = fakeServerWithClock.create();`\n\nCreates a server that also manages fake timers.\n\nThis is useful when testing `XHR` objects created with e.g. jQuery 1.3.x, which uses a timer to poll the object for completion, rather than the usual `onreadystatechange`.\n\n\n#### `server.configure(config);`\n\nConfigures the fake server.\n\nSee [options](#options) below for configuration parameters.\n\n#### `server.respondWith(response);`\n\nCauses the server to respond to any request not matched by another response with the provided data. The default catch-all response is `[404, {}, \"\"]`.\n\n`response` can be one of three things:\n\n1. A `String` representing the response body\n2. An `Array` with status, headers and response body, e.g. `[200, { \"Content-Type\": \"text/html\", \"Content-Length\": 2 }, \"OK\"]`\n3. A `Function`.\n\nDefault status is 200 and default headers are none.\n\nWhen the response is a `Function`, it will be passed the request object. You\nmust manually call [respond](#respond) on it to complete the\nrequest.\n\n\n#### `server.respondWith(url, response);`\n\nResponds to all requests to given URL, e.g. `/posts/1`.\n\n\n#### `server.respondWith(method, url, response);`\n\nResponds to all `method` requests to the given URL with the given response.\n\n`method` is an HTTP verb.\n\n\n#### `server.respondWith(urlRegExp, response);`\n\nURL may be a regular expression, e.g. `/\\\\/post\\\\//\\\\d+`\n\nIf the response is a `Function`, it will be passed any capture groups from the regular expression along with the XMLHttpRequest object:\n\n```javascript\nserver.respondWith(/\\/todo-items\\/(\\d+)/, function (xhr, id) {\n    xhr.respond(200, { \"Content-Type\": \"application/json\" }, '[{ \"id\": ' + id + \" }]\");\n});\n```\n\n\n#### `server.respondWith(method, urlRegExp, response);`\n\nResponds to all `method` requests to URLs matching the regular expression.\n\n#### `server.respond();`\n\nCauses all queued asynchronous requests to receive a response.\n\nIf none of the responses added through `respondWith` match, the default response is `[404, {}, \"\"]`.\n\nSynchronous requests are responded to immediately, so make sure to call `respondWith` upfront.\n\nIf called with arguments, `respondWith` will be called with those arguments before responding to requests.\n\n\n#### `server.autoRespond = true;`\n`\nIf set, will automatically respond to every request after a timeout.\n\nThe default timeout is 10ms but you can control it through the `autoRespondAfter` property.\n\nNote that this feature is intended to help during mockup development, and is not suitable for use in tests. For synchronous immediate responses, use `respondImmediately` instead.\n\n\n#### `server.autoRespondAfter = ms;`\n\nCauses the server to automatically respond to incoming requests after a timeout.\n\n#### `server.respondImmediately = true;`\n\nIf set, the server will respond to every request immediately and synchronously.\n\nThis is ideal for faking the server from within a test without having to call `server.respond()` after each request made in that test.\n\nAs this is synchronous and immediate, this is not suitable for simulating actual network latency in tests or mockups. To simulate network latency with automatic responses, see `server.autoRespond` and `server.autoRespondAfter`.\n\n#### array `server.requests`\n\nYou can inspect the `server.requests` to verify request ordering, find unmatched requests or check that no requests has been done.\n`server.requests` is an array of all the `FakeXMLHttpRequest` objects that have been created.\n\n#### `Boolean server.fakeHTTPMethods`\n\nIf set to `true`, server will find `_method` parameter in POST body and recognize that as the actual method.\n\nSupports a pattern common to Ruby on Rails applications. For custom HTTP method faking, override `server.getHTTPMethod(request)`.\n\n\n#### `server.getHTTPMethod(request)`\n\nUsed internally to determine the HTTP method used with the provided request.\n\nBy default this method simply returns `request.method`. When `server.fakeHTTPMethods` is true, the method will return the value of the `_method` parameter if the method is \"POST\".\n\nThis method can be overridden to provide custom behavior.\n\n\n#### `server.restore();`\n\nRestores the native XHR constructor.\n\n\n### Fake server options\n\nThese options are properties on the server object and can be set directly\n\n\n```javascript\nserver.autoRespond = true\n```\n\nYou can also pass options with an object literal to `fakeServer.create` and `.configure`.\n\n#### `Boolean autoRespond`\n\nIf set, will automatically respond to every request after a timeout.\n\nThe default timeout is 10ms but you can control it through the `autoRespondAfter` property.\n\nNote that this feature is intended to help during mockup development, and is not suitable for use in tests.\n\nFor synchronous immediate responses, use `respondImmediately` instead.\n\n\n#### `Number autoRespondAfter (ms)`\n\nCauses the server to automatically respond to incoming requests after a timeout.\n\n#### `Boolean respondImmediately`\n\nIf set, the server will respond to every request immediately and synchronously.\n\nThis is ideal for faking the server from within a test without having to call `server.respond()` after each request made in that test.\n\nAs this is synchronous and immediate, this is not suitable for simulating actual network latency in tests or mockups. To simulate network latency with automatic responses, see `server.autoRespond` and `server.autoRespondAfter`.\n\n\n#### `boolean fakeHTTPMethods`\n\nIf set to `true`, server will find `_method` parameter in `POST` body and recognize that as the actual method.\n\nSupports a pattern common to Ruby on Rails applications.\n\nFor custom HTTP method faking, override `server.getHTTPMethod(request)`\n\n[sinon]: http://sinonjs.org\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/sinonjs/nise.git"
  },
  "scripts": {
    "bundle": "browserify -s nise -o nise.js lib/index.js",
    "lint": "eslint .",
    "prepublish": "npm run bundle",
    "test": "mocha 'lib/**/*.test.js'",
    "test:coverage": "nyc --reporter=lcov --reporter=text --all npm test -- --reporter dot"
  },
  "version": "1.0.1"
}
